{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nvar _jsxFileName = \"/Users/enassamir/Desktop/find-the-pairs-game/src/containers/Deck.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../components/Card\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\nimport { getCardSize } from \"../shared/utility\";\nconst CardContainer = styled(_Col).withConfig({\n  displayName: \"Deck__CardContainer\",\n  componentId: \"nveq3p-0\"\n})([\"position:relative;width:\", \"px;hight:\", \"px;box-sizing:border-box;\"], props => props.width, props => props.height);\nconst StyledDeck = styled(_Row).withConfig({\n  displayName: \"Deck__StyledDeck\",\n  componentId: \"nveq3p-1\"\n})([\"max-width:\", \"px;max-height:\", \"px;\"], props => props.width + 5, props => props.height);\n\nconst Deck = props => {\n  //get the deck size according to the screen size\n  const deckSize = useWindowSize(); //get the card size according to the deck size\n\n  const {\n    cardSize,\n    cols\n  } = getCardSize(deckSize, props.noOfPairs);\n  useEffect(() => {\n    getCardSize(deckSize, props.noOfPairs);\n    props.onStartGame();\n  }, [props.noOfPairs]); //a hook function to listen to the 'resize' event to always get the screen size when changed\n\n  function useWindowSize() {\n    const {\n      0: deckSize,\n      1: setDeckSize\n    } = useState({\n      width: 0,\n      height: 0\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setDeckSize({\n          width: (window.innerWidth || document.documentElement.clientWidth) * (785 / 1440),\n          height: (window.innerHeight || document.documentElement.clientHeight) * (664 / 900)\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n    return deckSize;\n  }\n\n  function cardClickHandler(id, index) {\n    if (props.flippedCardsId.length == 2) return;\n    props.flipCard(index, id);\n    if (props.flippedCardsId.length == 1) checkMatch(index);\n  }\n\n  function checkMatch(selectedIndex) {\n    const {\n      cards,\n      flippedCardsId\n    } = props;\n\n    if (cards[flippedCardsId[0]].name === cards[selectedIndex].name) {\n      props.setMatchedCards(selectedIndex);\n    } else {\n      props.resetCardsTimeout();\n    }\n  }\n\n  return __jsx(StyledDeck, {\n    width: deckSize.width,\n    height: deckSize.height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, props.cards.map((card, i) => {\n    return __jsx(CardContainer, {\n      width: cardSize.width,\n      height: cardSize.height,\n      key: i,\n      span: 24 / cols,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, __jsx(Card, {\n      id: card.id,\n      name: card.name,\n      flipped: props.flippedCardsId.includes(i),\n      matched: props.matchedCards.includes(i),\n      width: cardSize.width,\n      height: cardSize.height,\n      cardClicked: () => cardClickHandler(card.id, i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    cards: state.cards,\n    noOfPairs: state.noOfPairs,\n    flippedCardsId: state.flippedCardsId,\n    matchedCards: state.matchedCards\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    flipCard: (index, id) => dispatch(actions.flipCard(index, id)),\n    onStartGame: () => dispatch(actions.startGame()),\n    setMatchedCards: index => dispatch(actions.setMatchedCards(index)),\n    resetCardsTimeout: () => dispatch(actions.resetCardsTimeout())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Deck);","map":{"version":3,"sources":["/Users/enassamir/Desktop/find-the-pairs-game/src/containers/Deck.js"],"names":["React","useEffect","useState","Card","styled","connect","actions","getCardSize","CardContainer","props","width","height","StyledDeck","Deck","deckSize","useWindowSize","cardSize","cols","noOfPairs","onStartGame","setDeckSize","handleResize","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","addEventListener","removeEventListener","cardClickHandler","id","index","flippedCardsId","length","flipCard","checkMatch","selectedIndex","cards","name","setMatchedCards","resetCardsTimeout","map","card","i","includes","matchedCards","mapStateToProps","state","mapDispatchToProps","dispatch","startGame"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"../components/Card\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { Row, Col } from \"antd\";\nimport * as actions from \"../store/actions/index\";\nimport { getCardSize } from \"../shared/utility\";\n\nconst CardContainer = styled(Col)`\n  position: relative;\n  width: ${(props) => props.width}px;\n  hight: ${(props) => props.height}px;\n  box-sizing: border-box;\n`;\n\nconst StyledDeck = styled(Row)`\n  max-width: ${(props) => props.width + 5}px;\n  max-height: ${(props) => props.height}px;\n`;\n\nconst Deck = (props) => {\n  //get the deck size according to the screen size\n  const deckSize = useWindowSize();\n\n  //get the card size according to the deck size\n  const { cardSize, cols } = getCardSize(deckSize, props.noOfPairs);\n\n  useEffect(() => {\n    getCardSize(deckSize, props.noOfPairs);\n    props.onStartGame();\n  }, [props.noOfPairs]);\n\n  //a hook function to listen to the 'resize' event to always get the screen size when changed\n  function useWindowSize() {\n    const [deckSize, setDeckSize] = useState({\n      width: 0,\n      height: 0,\n    });\n\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setDeckSize({\n          width: (window.innerWidth || document.documentElement.clientWidth) * (785 / 1440),\n          height: (window.innerHeight || document.documentElement.clientHeight) * (664 / 900),\n        });\n      }\n\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n    return deckSize;\n  }\n\n  function cardClickHandler(id, index) {\n    if (props.flippedCardsId.length == 2) return;\n    props.flipCard(index, id);\n    if (props.flippedCardsId.length == 1) checkMatch(index);\n  }\n\n  function checkMatch(selectedIndex) {\n    const { cards, flippedCardsId } = props;\n    if (cards[flippedCardsId[0]].name === cards[selectedIndex].name) {\n      props.setMatchedCards(selectedIndex);\n    } else {\n      props.resetCardsTimeout();\n    }\n  }\n\n  return (\n    <StyledDeck width={deckSize.width} height={deckSize.height}>\n      {props.cards.map((card, i) => {\n        return (\n          <CardContainer width={cardSize.width} height={cardSize.height} key={i} span={24 / cols}>\n            <Card\n              id={card.id}\n              name={card.name}\n              flipped={props.flippedCardsId.includes(i)}\n              matched={props.matchedCards.includes(i)}\n              width={cardSize.width}\n              height={cardSize.height}\n              cardClicked={() => cardClickHandler(card.id, i)}\n            />\n          </CardContainer>\n        );\n      })}\n    </StyledDeck>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cards: state.cards,\n    noOfPairs: state.noOfPairs,\n    flippedCardsId: state.flippedCardsId,\n    matchedCards: state.matchedCards,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    flipCard: (index, id) => dispatch(actions.flipCard(index, id)),\n    onStartGame: () => dispatch(actions.startGame()),\n    setMatchedCards: (index) => dispatch(actions.setMatchedCards(index)),\n    resetCardsTimeout: () => dispatch(actions.resetCardsTimeout()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Deck);\n"]},"metadata":{},"sourceType":"module"}