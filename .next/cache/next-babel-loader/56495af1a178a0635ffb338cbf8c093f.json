{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var updateObject = function updateObject(oldObject, updatedProperties) {\n  return _objectSpread(_objectSpread({}, oldObject), updatedProperties);\n};\nexport var shuffleCards = function shuffleCards(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\nexport var getCardSize = function getCardSize(deckSize, noOfPairs) {\n  var initialVal = Math.ceil(Math.sqrt(noOfPairs * 2)) + 1;\n  var cols = initialVal;\n\n  for (cols; cols >= 1; cols--) {\n    if (noOfPairs * 2 % cols == 0) {\n      break;\n    }\n  }\n\n  var noOfRows = noOfPairs * 2 / cols;\n  var width = Math.ceil(deckSize.width / cols * 100) / 100;\n  var height = Math.ceil(deckSize.height / noOfRows * 100) / 100;\n  var cardSize = {\n    width: width,\n    height: height\n  };\n  return {\n    cardSize: cardSize,\n    cols: cols\n  };\n};","map":{"version":3,"sources":["/Users/enassamir/Desktop/find-the-pairs-game/src/shared/utility.js"],"names":["updateObject","oldObject","updatedProperties","shuffleCards","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","getCardSize","deckSize","noOfPairs","initialVal","ceil","sqrt","cols","noOfRows","width","height","cardSize"],"mappings":";;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,iBAAZ,EAAkC;AAC5D,yCACKD,SADL,GAEKC,iBAFL;AAID,CALM;AAOP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACrC,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MACEC,cADF;AAAA,MAEEC,WAFF;;AAIA,SAAOH,YAAY,KAAK,CAAxB,EAA2B;AACzBG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,SAAOH,KAAP;AACD,CAdM;AAiBP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,SAAX,EAA0B;AACnD,MAAIC,UAAU,GAAGN,IAAI,CAACO,IAAL,CAAUP,IAAI,CAACQ,IAAL,CAAUH,SAAS,GAAG,CAAtB,CAAV,IAAsC,CAAvD;AACA,MAAII,IAAI,GAAGH,UAAX;;AACA,OAAKG,IAAL,EAAWA,IAAI,IAAI,CAAnB,EAAsBA,IAAI,EAA1B,EAA8B;AAC5B,QAAKJ,SAAS,GAAG,CAAb,GAAkBI,IAAlB,IAA0B,CAA9B,EAAiC;AAC/B;AACD;AACF;;AAED,MAAIC,QAAQ,GAAIL,SAAS,GAAG,CAAb,GAAkBI,IAAjC;AACA,MAAIE,KAAK,GAAGX,IAAI,CAACO,IAAL,CAAYH,QAAQ,CAACO,KAAV,GAAmBF,IAApB,GAA4B,GAAtC,IAA6C,GAAzD;AACA,MAAIG,MAAM,GAAGZ,IAAI,CAACO,IAAL,CAAWH,QAAQ,CAACQ,MAAT,GAAkBF,QAAnB,GAA+B,GAAzC,IAAgD,GAA7D;AACA,MAAIG,QAAQ,GAAG;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,MAAM,EAANA;AAAT,GAAf;AACA,SAAO;AAAEC,IAAAA,QAAQ,EAARA,QAAF;AAAYJ,IAAAA,IAAI,EAAJA;AAAZ,GAAP;AACD,CAdM","sourcesContent":["export const updateObject = (oldObject, updatedProperties) => {\n  return {\n    ...oldObject,\n    ...updatedProperties,\n  };\n};\n\nexport const shuffleCards = (array) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n\nexport const getCardSize = (deckSize, noOfPairs) =>  {\n  let initialVal = Math.ceil(Math.sqrt(noOfPairs * 2)) + 1;\n  let cols = initialVal;\n  for (cols; cols >= 1; cols--) {\n    if ((noOfPairs * 2) % cols == 0) {\n      break;\n    }\n  }\n\n  let noOfRows = (noOfPairs * 2) / cols;\n  let width = Math.ceil(((deckSize.width) / cols) * 100) / 100;\n  let height = Math.ceil((deckSize.height / noOfRows) * 100) / 100;\n  let cardSize = { width, height };\n  return { cardSize, cols };\n}\n"]},"metadata":{},"sourceType":"module"}